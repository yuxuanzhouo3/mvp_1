"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/auth/login/page",{

/***/ "(app-pages-browser)/./app/providers/AuthProvider.tsx":
/*!****************************************!*\
  !*** ./app/providers/AuthProvider.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/navigation.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_navigation__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ AuthProvider,useAuth auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Mock user for testing when Supabase is not configured\nconst MOCK_USER = {\n    id: \"mock-user-id-123\",\n    email: \"test@personalink.ai\",\n    user_metadata: {\n        full_name: \"Test User\",\n        avatar_url: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face\"\n    },\n    app_metadata: {},\n    aud: \"authenticated\",\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    email_confirmed_at: new Date().toISOString(),\n    last_sign_in_at: new Date().toISOString(),\n    role: \"authenticated\",\n    confirmation_sent_at: undefined,\n    confirmed_at: undefined,\n    banned_until: undefined,\n    reauthentication_sent_at: undefined,\n    recovery_sent_at: undefined,\n    phone_change_confirm_status: 0,\n    phone_confirmed_at: undefined,\n    phone_change_sent_at: undefined,\n    phone: undefined,\n    email_change: undefined,\n    phone_change: undefined,\n    factors: undefined,\n    identities: []\n};\nconst MOCK_SESSION = {\n    access_token: \"mock-access-token\",\n    refresh_token: \"mock-refresh-token\",\n    expires_in: 3600,\n    expires_at: Math.floor(Date.now() / 1000) + 3600,\n    token_type: \"bearer\",\n    user: MOCK_USER\n};\nfunction AuthProvider(param) {\n    let { children } = param;\n    _s();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [session, setSession] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    // Check if we're in mock mode (no Supabase config)\n    const isMockMode =  false || !\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJhbXJhdGV4a25tcXZkYmFsemVuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI1MTM4NzEsImV4cCI6MjA2ODA4OTg3MX0.yYa98ioJLLouUgHWITGb7U_VjNCTUuM-5NcraM7f3zA\";\n    // Memoize Supabase client to prevent recreation\n    const supabase = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (isMockMode) {\n            // Return a mock client\n            return {\n                auth: {\n                    getSession: async ()=>({\n                            data: {\n                                session: null\n                            },\n                            error: null\n                        }),\n                    signInWithPassword: async ()=>({\n                            data: {\n                                session: null,\n                                user: null\n                            },\n                            error: null\n                        }),\n                    signUp: async ()=>({\n                            data: {\n                                session: null,\n                                user: null\n                            },\n                            error: null\n                        }),\n                    signInWithOAuth: async ()=>({\n                            data: {\n                                session: null,\n                                user: null\n                            },\n                            error: null\n                        }),\n                    signInWithOtp: async ()=>({\n                            data: {\n                                session: null,\n                                user: null\n                            },\n                            error: null\n                        }),\n                    verifyOtp: async ()=>({\n                            data: {\n                                session: null,\n                                user: null\n                            },\n                            error: null\n                        }),\n                    signOut: async ()=>({\n                            error: null\n                        }),\n                    resetPasswordForEmail: async ()=>({\n                            data: null,\n                            error: null\n                        }),\n                    updateUser: async ()=>({\n                            data: {\n                                user: null\n                            },\n                            error: null\n                        }),\n                    onAuthStateChange: ()=>({\n                            data: {\n                                subscription: {\n                                    unsubscribe: ()=>{}\n                                }\n                            }\n                        }),\n                    functions: {\n                        invoke: async ()=>({\n                                data: null,\n                                error: null\n                            })\n                    }\n                },\n                from: ()=>({\n                        select: ()=>({\n                                eq: ()=>({\n                                        single: async ()=>({\n                                                data: null,\n                                                error: null\n                                            })\n                                    })\n                            }),\n                        upsert: async ()=>({\n                                data: null,\n                                error: null\n                            })\n                    })\n            };\n        }\n        return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_3__.createClient)(\"https://bamratexknmqvdbalzen.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJhbXJhdGV4a25tcXZkYmFsemVuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI1MTM4NzEsImV4cCI6MjA2ODA4OTg3MX0.yYa98ioJLLouUgHWITGb7U_VjNCTUuM-5NcraM7f3zA\");\n    }, [\n        isMockMode\n    ]);\n    // Memoize captureUserMetadata to prevent recreation\n    const captureUserMetadata = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (user)=>{\n        if (isMockMode) {\n            console.log(\"Mock mode: Skipping user metadata capture\");\n            return;\n        }\n        try {\n            var _user_user_metadata, _user_user_metadata1, _user_user_metadata2;\n            // Only capture metadata on first sign in, not on every auth state change\n            const { data: existingProfile } = await supabase.from(\"profiles\").select(\"id\").eq(\"id\", user.id).single();\n            if (existingProfile) {\n                // User already has a profile, skip metadata capture\n                return;\n            }\n            // Only fetch geo data if we don't have a profile yet\n            const response = await fetch(\"https://ipapi.co/json/\");\n            const geoData = await response.json();\n            await supabase.from(\"profiles\").upsert({\n                id: user.id,\n                email: user.email,\n                full_name: ((_user_user_metadata = user.user_metadata) === null || _user_user_metadata === void 0 ? void 0 : _user_user_metadata.full_name) || ((_user_user_metadata1 = user.user_metadata) === null || _user_user_metadata1 === void 0 ? void 0 : _user_user_metadata1.name),\n                avatar_url: (_user_user_metadata2 = user.user_metadata) === null || _user_user_metadata2 === void 0 ? void 0 : _user_user_metadata2.avatar_url,\n                updated_at: new Date().toISOString(),\n                device_info: {\n                    user_agent: navigator.userAgent,\n                    platform: navigator.platform,\n                    language: navigator.language\n                },\n                location_info: {\n                    ip: geoData.ip,\n                    country: geoData.country_name,\n                    region: geoData.region,\n                    city: geoData.city,\n                    timezone: geoData.timezone\n                }\n            });\n        } catch (error) {\n            console.error(\"Error capturing user metadata:\", error);\n        }\n    }, [\n        supabase,\n        isMockMode\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let mounted = true;\n        // Get initial session\n        const getInitialSession = async ()=>{\n            try {\n                if (isMockMode) {\n                    // In mock mode, check localStorage for mock session\n                    const mockSession = localStorage.getItem(\"mock-session\");\n                    if (mockSession && mounted) {\n                        setSession(MOCK_SESSION);\n                        setUser(MOCK_USER);\n                        setLoading(false);\n                        return;\n                    }\n                }\n                const { data: { session } } = await supabase.auth.getSession();\n                if (mounted) {\n                    setSession(session);\n                    var _session_user;\n                    setUser((_session_user = session === null || session === void 0 ? void 0 : session.user) !== null && _session_user !== void 0 ? _session_user : null);\n                    setLoading(false);\n                }\n            } catch (error) {\n                console.error(\"Error getting initial session:\", error);\n                if (mounted) {\n                    setLoading(false);\n                }\n            }\n        };\n        getInitialSession();\n        // Listen for auth changes\n        const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session)=>{\n            if (!mounted) return;\n            setSession(session);\n            var _session_user;\n            setUser((_session_user = session === null || session === void 0 ? void 0 : session.user) !== null && _session_user !== void 0 ? _session_user : null);\n            setLoading(false);\n            // Only capture metadata on SIGNED_IN event\n            if (event === \"SIGNED_IN\" && (session === null || session === void 0 ? void 0 : session.user)) {\n                // Use setTimeout to avoid blocking the auth state change\n                setTimeout(()=>{\n                    captureUserMetadata(session.user);\n                }, 0);\n            }\n        });\n        return ()=>{\n            mounted = false;\n            subscription.unsubscribe();\n        };\n    }, [\n        supabase,\n        captureUserMetadata,\n        isMockMode\n    ]);\n    // Memoize all auth functions to prevent unnecessary re-renders\n    const signIn = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (email, password)=>{\n        if (isMockMode) {\n            // Mock authentication\n            if (email === \"test@personalink.ai\" && password === \"test123\") {\n                setSession(MOCK_SESSION);\n                setUser(MOCK_USER);\n                localStorage.setItem(\"mock-session\", \"true\");\n                return {\n                    error: null\n                };\n            } else {\n                return {\n                    error: {\n                        message: \"Invalid email or password\"\n                    }\n                };\n            }\n        }\n        const { error } = await supabase.auth.signInWithPassword({\n            email,\n            password\n        });\n        return {\n            error\n        };\n    }, [\n        supabase,\n        isMockMode\n    ]);\n    const signUp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (email, password, fullName)=>{\n        if (isMockMode) {\n            // Mock registration\n            const mockNewUser = {\n                ...MOCK_USER,\n                id: \"mock-user-\".concat(Date.now()),\n                email,\n                user_metadata: {\n                    full_name: fullName\n                }\n            };\n            setSession({\n                ...MOCK_SESSION,\n                user: mockNewUser\n            });\n            setUser(mockNewUser);\n            localStorage.setItem(\"mock-session\", \"true\");\n            return {\n                error: null\n            };\n        }\n        const { error } = await supabase.auth.signUp({\n            email,\n            password,\n            options: {\n                data: {\n                    full_name: fullName\n                }\n            }\n        });\n        return {\n            error\n        };\n    }, [\n        supabase,\n        isMockMode\n    ]);\n    const signInWithGoogle = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (isMockMode) {\n            return {\n                error: {\n                    message: \"Google sign-in not available in mock mode\"\n                }\n            };\n        }\n        const { error } = await supabase.auth.signInWithOAuth({\n            provider: \"google\",\n            options: {\n                redirectTo: \"\".concat(window.location.origin, \"/auth/callback\")\n            }\n        });\n        return {\n            error\n        };\n    }, [\n        supabase,\n        isMockMode\n    ]);\n    const signInWithPhone = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (phone)=>{\n        if (isMockMode) {\n            return {\n                error: {\n                    message: \"Phone sign-in not available in mock mode\"\n                }\n            };\n        }\n        const { error } = await supabase.auth.signInWithOtp({\n            phone\n        });\n        return {\n            error\n        };\n    }, [\n        supabase,\n        isMockMode\n    ]);\n    const verifyPhoneOTP = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (phone, token)=>{\n        if (isMockMode) {\n            return {\n                error: {\n                    message: \"Phone verification not available in mock mode\"\n                }\n            };\n        }\n        const { error } = await supabase.auth.verifyOtp({\n            phone,\n            token,\n            type: \"sms\"\n        });\n        return {\n            error\n        };\n    }, [\n        supabase,\n        isMockMode\n    ]);\n    const signOut = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (isMockMode) {\n            setSession(null);\n            setUser(null);\n            localStorage.removeItem(\"mock-session\");\n            router.push(\"/\");\n            return;\n        }\n        await supabase.auth.signOut();\n        router.push(\"/\");\n    }, [\n        supabase,\n        router,\n        isMockMode\n    ]);\n    const resetPassword = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (email)=>{\n        if (isMockMode) {\n            return {\n                error: {\n                    message: \"Password reset not available in mock mode\"\n                }\n            };\n        }\n        const { error } = await supabase.auth.resetPasswordForEmail(email, {\n            redirectTo: \"\".concat(window.location.origin, \"/auth/update-password\")\n        });\n        return {\n            error\n        };\n    }, [\n        supabase,\n        isMockMode\n    ]);\n    const updatePassword = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (password)=>{\n        if (isMockMode) {\n            return {\n                error: {\n                    message: \"Password update not available in mock mode\"\n                }\n            };\n        }\n        const { error } = await supabase.auth.updateUser({\n            password\n        });\n        return {\n            error\n        };\n    }, [\n        supabase,\n        isMockMode\n    ]);\n    const enable2FA = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (isMockMode) {\n            return {\n                error: {\n                    message: \"2FA not available in mock mode\"\n                }\n            };\n        }\n        try {\n            const { data, error } = await supabase.functions.invoke(\"enable-2fa\", {\n                body: {\n                    userId: user === null || user === void 0 ? void 0 : user.id\n                }\n            });\n            return {\n                error,\n                data\n            };\n        } catch (error) {\n            return {\n                error: {\n                    message: \"Failed to enable 2FA\"\n                }\n            };\n        }\n    }, [\n        supabase,\n        user,\n        isMockMode\n    ]);\n    const verify2FA = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (token)=>{\n        if (isMockMode) {\n            return {\n                error: {\n                    message: \"2FA verification not available in mock mode\"\n                }\n            };\n        }\n        try {\n            const { data, error } = await supabase.functions.invoke(\"verify-2fa\", {\n                body: {\n                    userId: user === null || user === void 0 ? void 0 : user.id,\n                    token\n                }\n            });\n            return {\n                error,\n                data\n            };\n        } catch (error) {\n            return {\n                error: {\n                    message: \"Failed to verify 2FA\"\n                }\n            };\n        }\n    }, [\n        supabase,\n        user,\n        isMockMode\n    ]);\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            user,\n            session,\n            loading,\n            signIn,\n            signUp,\n            signInWithGoogle,\n            signInWithPhone,\n            verifyPhoneOTP,\n            signOut,\n            resetPassword,\n            updatePassword,\n            enable2FA,\n            verify2FA,\n            supabase\n        }), [\n        user,\n        session,\n        loading,\n        signIn,\n        signUp,\n        signInWithGoogle,\n        signInWithPhone,\n        verifyPhoneOTP,\n        signOut,\n        resetPassword,\n        updatePassword,\n        enable2FA,\n        verify2FA,\n        supabase\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/mac-guest1/Downloads/Git/mvp_projects/mvp_1/app/providers/AuthProvider.tsx\",\n        lineNumber: 397,\n        columnNumber: 5\n    }, this);\n}\n_s(AuthProvider, \"ZOcBe9pimLdSFwSHk4aurI6Dzsc=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = AuthProvider;\nfunction useAuth() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n}\n_s1(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/providers/AuthProvider.tsx\n"));

/***/ })

});