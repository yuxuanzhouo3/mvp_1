/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_db_ts";
exports.ids = ["_rsc_lib_db_ts"];
exports.modules = {

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   getDBClient: () => (/* binding */ getDBClient),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _utils_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/retry */ \"(rsc)/./lib/utils/retry.ts\");\n/* harmony import */ var _utils_circuitBreaker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/circuitBreaker */ \"(rsc)/./lib/utils/circuitBreaker.ts\");\n\n\n\nclass DBConnection {\n    static{\n        this.healthStatus = {\n            status: \"unhealthy\",\n            responseTime: 0,\n            lastCheck: new Date(),\n            errorCount: 0,\n            successCount: 0,\n            activeConnections: 0,\n            queueSize: 0\n        };\n    }\n    static{\n        this.isInitialized = false;\n    }\n    static{\n        this.connectionPool = new Map();\n    }\n    static{\n        this.lastRecycleTime = Date.now();\n    }\n    static{\n        this.RECYCLE_INTERVAL = 300000 // 5ÂàÜÈíü\n        ;\n    }\n    static{\n        this.MAX_POOL_SIZE = 10;\n    }\n    static initialize(config) {\n        if (this.isInitialized) {\n            console.warn(\"‚ö†Ô∏è  Database connection manager already initialized\");\n            return;\n        }\n        this.config = {\n            maxRetries: 3,\n            retryDelay: 1000,\n            timeout: 10000,\n            maxConnections: 20,\n            idleTimeout: 30000,\n            environment: \"development\",\n            ...config\n        };\n        // ÁéØÂ¢ÉÁâπÂÆöÈÖçÁΩÆ\n        this.applyEnvironmentConfig();\n        this.circuitBreaker = new _utils_circuitBreaker__WEBPACK_IMPORTED_MODULE_1__.CircuitBreaker({\n            failureThreshold: this.config.environment === \"production\" ? 3 : 5,\n            recoveryTimeout: this.config.environment === \"production\" ? 30000 : 60000,\n            expectedResponseTime: this.config.timeout\n        });\n        this.instance = this.createClient();\n        this.isInitialized = true;\n        this.startHealthMonitoring();\n        this.startConnectionRecycling();\n        console.log(`‚úÖ Database connection manager initialized for ${this.config.environment} environment`);\n    }\n    static applyEnvironmentConfig() {\n        switch(this.config.environment){\n            case \"production\":\n                this.config.maxRetries = 5;\n                this.config.timeout = 15000;\n                this.config.maxConnections = 50;\n                break;\n            case \"staging\":\n                this.config.maxRetries = 4;\n                this.config.timeout = 12000;\n                this.config.maxConnections = 30;\n                break;\n            case \"development\":\n            default:\n                this.config.maxRetries = 3;\n                this.config.timeout = 10000;\n                this.config.maxConnections = 20;\n                break;\n        }\n    }\n    static createClient() {\n        return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__.createClient)(this.config.url, this.config.serviceRoleKey, {\n            auth: {\n                autoRefreshToken: true,\n                persistSession: false\n            },\n            global: {\n                headers: {\n                    \"X-Client-Info\": `personalink-db-manager-${this.config.environment}`\n                },\n                fetch: this.customFetchWithRetry.bind(this)\n            }\n        });\n    }\n    static getInstance() {\n        if (!this.isInitialized) {\n            throw new Error(\"Database connection manager not initialized. Call initialize() first.\");\n        }\n        return this.instance;\n    }\n    static get getInitializationStatus() {\n        return this.isInitialized;\n    }\n    static getConnectionFromPool(key) {\n        if (this.connectionPool.has(key)) {\n            return this.connectionPool.get(key);\n        }\n        if (this.connectionPool.size >= this.MAX_POOL_SIZE) {\n            // ÂõûÊî∂ÊúÄÊóßÁöÑËøûÊé•\n            const oldestKey = this.connectionPool.keys().next().value;\n            if (oldestKey) {\n                this.connectionPool.delete(oldestKey);\n            }\n        }\n        const connection = this.createClient();\n        this.connectionPool.set(key, connection);\n        return connection;\n    }\n    static startConnectionRecycling() {\n        setInterval(()=>{\n            this.recycleConnections();\n        }, this.RECYCLE_INTERVAL);\n    }\n    static recycleConnections() {\n        const now = Date.now();\n        const connectionsToRemove = [];\n        this.connectionPool.forEach((connection, key)=>{\n            // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ËøûÊé•ÂÅ•Â∫∑Ê£ÄÊü•ÈÄªËæë\n            // ÊöÇÊó∂ÁÆÄÂçïÂú∞ÂõûÊî∂ÊâÄÊúâËøûÊé•\n            connectionsToRemove.push(key);\n        });\n        connectionsToRemove.forEach((key)=>{\n            this.connectionPool.delete(key);\n        });\n        if (connectionsToRemove.length > 0) {\n            console.log(`üîÑ Recycled ${connectionsToRemove.length} database connections`);\n        }\n        this.lastRecycleTime = now;\n    }\n    static async customFetchWithRetry(input, init) {\n        const startTime = Date.now();\n        return this.circuitBreaker.execute(async ()=>{\n            try {\n                this.healthStatus.activeConnections++;\n                this.healthStatus.queueSize++;\n                const response = await fetch(input, {\n                    ...init,\n                    signal: AbortSignal.timeout(this.config.timeout || 10000)\n                });\n                const responseTime = Date.now() - startTime;\n                this.updateHealth(true, responseTime);\n                return response;\n            } catch (error) {\n                const responseTime = Date.now() - startTime;\n                this.updateHealth(false, responseTime);\n                throw error;\n            } finally{\n                this.healthStatus.activeConnections = Math.max(0, this.healthStatus.activeConnections - 1);\n                this.healthStatus.queueSize = Math.max(0, this.healthStatus.queueSize - 1);\n            }\n        });\n    }\n    static updateHealth(success, responseTime) {\n        this.healthStatus.responseTime = responseTime;\n        this.healthStatus.lastCheck = new Date();\n        if (success) {\n            this.healthStatus.successCount++;\n            this.healthStatus.errorCount = Math.max(0, this.healthStatus.errorCount - 1);\n        } else {\n            this.healthStatus.errorCount++;\n        }\n        // Êõ¥Êñ∞ÂÅ•Â∫∑Áä∂ÊÄÅ\n        const errorRate = this.healthStatus.errorCount / (this.healthStatus.successCount + this.healthStatus.errorCount);\n        if (errorRate === 0) {\n            this.healthStatus.status = \"healthy\";\n        } else if (errorRate < 0.1) {\n            this.healthStatus.status = \"degraded\";\n        } else {\n            this.healthStatus.status = \"unhealthy\";\n        }\n    }\n    static startHealthMonitoring() {\n        this.healthCheckInterval = setInterval(async ()=>{\n            await this.performHealthCheck();\n        }, 30000); // ÊØè30ÁßíÊ£ÄÊü•‰∏ÄÊ¨°\n    }\n    static async performHealthCheck() {\n        try {\n            const startTime = Date.now();\n            const { data, error } = await this.instance.from(\"profiles\").select(\"count\").limit(1);\n            const responseTime = Date.now() - startTime;\n            if (error) {\n                this.updateHealth(false, responseTime);\n                console.warn(\"‚ö†Ô∏è  Health check failed:\", error.message);\n            } else {\n                this.updateHealth(true, responseTime);\n            }\n        } catch (error) {\n            this.updateHealth(false, 0);\n            console.error(\"‚ùå Health check error:\", error);\n        }\n    }\n    static getHealthStatus() {\n        return {\n            ...this.healthStatus\n        };\n    }\n    static async executeWithRetry(operation, context = \"database operation\") {\n        if (!this.isInitialized) {\n            throw new Error(\"Database connection manager not initialized\");\n        }\n        return this.circuitBreaker.execute(async ()=>{\n            let lastError = null;\n            for(let attempt = 1; attempt <= this.config.maxRetries; attempt++){\n                try {\n                    const result = await operation();\n                    this.updateHealth(true, 0);\n                    return result;\n                } catch (error) {\n                    lastError = error;\n                    this.updateHealth(false, 0);\n                    console.error(`‚ùå ${context} failed (attempt ${attempt}/${this.config.maxRetries}):`, error);\n                    if (attempt < this.config.maxRetries) {\n                        const delay = (0,_utils_retry__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff)(attempt, this.config.retryDelay);\n                        console.log(`‚è≥ Retrying in ${delay}ms...`);\n                        await this.sleep(delay);\n                    }\n                }\n            }\n            throw new Error(`${context} failed after ${this.config.maxRetries} attempts: ${lastError?.message}`);\n        });\n    }\n    static sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    static async resetConnection() {\n        this.isInitialized = false;\n        this.healthStatus = {\n            status: \"unhealthy\",\n            responseTime: 0,\n            lastCheck: new Date(),\n            errorCount: 0,\n            successCount: 0,\n            activeConnections: 0,\n            queueSize: 0\n        };\n        // Ê∏ÖÁêÜËøûÊé•Ê±†\n        this.connectionPool.clear();\n        if (this.healthCheckInterval) {\n            clearInterval(this.healthCheckInterval);\n        }\n        await this.initialize(this.config);\n    }\n    static getStats() {\n        return {\n            health: this.healthStatus,\n            config: this.config,\n            isInitialized: this.isInitialized,\n            circuitBreaker: this.circuitBreaker?.getStatus() || {\n                state: \"unknown\",\n                failureCount: 0\n            },\n            connectionPool: {\n                size: this.connectionPool.size,\n                maxSize: this.MAX_POOL_SIZE,\n                lastRecycle: this.lastRecycleTime\n            }\n        };\n    }\n}\n// ÂØºÂá∫Âçï‰æãÂÆû‰æã\nconst db = DBConnection;\n// ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìËøûÊé•\nfunction initializeDatabase() {\n    const environment = \"development\" || 0;\n    db.initialize({\n        url: \"https://bamratexknmqvdbalzen.supabase.co\",\n        anonKey: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJhbXJhdGV4a25tcXZkYmFsemVuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI1MTM4NzEsImV4cCI6MjA2ODA4OTg3MX0.yYa98ioJLLouUgHWITGb7U_VjNCTUuM-5NcraM7f3zA\",\n        serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,\n        environment,\n        maxRetries: 3,\n        retryDelay: 1000,\n        timeout: 10000,\n        maxConnections: 20,\n        idleTimeout: 30000\n    });\n}\n// Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÂÆ¢Êà∑Á´Ø\nfunction getDBClient() {\n    return db.getInstance();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/circuitBreaker.ts":
/*!*************************************!*\
  !*** ./lib/utils/circuitBreaker.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircuitBreaker: () => (/* binding */ CircuitBreaker),\n/* harmony export */   CircuitBreakerManager: () => (/* binding */ CircuitBreakerManager),\n/* harmony export */   ServiceUnavailableError: () => (/* binding */ ServiceUnavailableError),\n/* harmony export */   circuitBreakerManager: () => (/* binding */ circuitBreakerManager)\n/* harmony export */ });\nclass CircuitBreaker {\n    constructor(options){\n        this.state = \"closed\";\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.totalRequests = 0;\n        this.halfOpenAttempts = 0;\n        this.consecutiveSuccesses = 0;\n        this.metrics = {\n            totalExecutions: 0,\n            successfulExecutions: 0,\n            failedExecutions: 0,\n            circuitOpens: 0,\n            circuitCloses: 0,\n            averageResponseTime: 0\n        };\n        this.responseTimes = [];\n        this.options = {\n            monitoringWindow: 60000,\n            halfOpenMaxAttempts: 3,\n            ...options\n        };\n    }\n    async execute(fn) {\n        this.totalRequests++;\n        this.metrics.totalExecutions++;\n        // Ê£ÄÊü•Êñ≠Ë∑ØÂô®Áä∂ÊÄÅ\n        if (this.state === \"open\") {\n            if (this.shouldAttemptReset()) {\n                this.transitionToHalfOpen();\n            } else {\n                throw new ServiceUnavailableError(`Circuit breaker is open. Next attempt at ${this.nextAttemptTime?.toISOString()}`);\n            }\n        }\n        try {\n            const startTime = Date.now();\n            const result = await Promise.race([\n                fn(),\n                this.createTimeoutPromise()\n            ]);\n            const responseTime = Date.now() - startTime;\n            this.recordResponseTime(responseTime);\n            // Ê£ÄÊü•ÂìçÂ∫îÊó∂Èó¥\n            if (responseTime > this.options.expectedResponseTime) {\n                this.recordFailure(new Error(`Response time ${responseTime}ms exceeded threshold ${this.options.expectedResponseTime}ms`));\n                throw new Error(\"Response time exceeded threshold\");\n            }\n            this.recordSuccess();\n            return result;\n        } catch (error) {\n            this.recordFailure(error);\n            throw error;\n        }\n    }\n    createTimeoutPromise() {\n        return new Promise((_, reject)=>{\n            setTimeout(()=>{\n                reject(new Error(`Operation timeout after ${this.options.expectedResponseTime}ms`));\n            }, this.options.expectedResponseTime);\n        });\n    }\n    recordSuccess() {\n        this.successCount++;\n        this.lastSuccessTime = new Date();\n        this.consecutiveSuccesses++;\n        this.metrics.successfulExecutions++;\n        this.metrics.lastExecutionTime = new Date();\n        if (this.state === \"half-open\") {\n            this.halfOpenAttempts++;\n            // Â¶ÇÊûúÂçäÂºÄÁä∂ÊÄÅ‰∏ãËøûÁª≠ÊàêÂäüÊ¨°Êï∞ËææÂà∞ÈòàÂÄºÔºåÂÖ≥Èó≠Êñ≠Ë∑ØÂô®\n            if (this.consecutiveSuccesses >= this.options.halfOpenMaxAttempts) {\n                this.transitionToClosed();\n            }\n        } else if (this.state === \"closed\") {\n            // Âú®ÂÖ≥Èó≠Áä∂ÊÄÅ‰∏ãÔºåÈáçÁΩÆÂ§±Ë¥•ËÆ°Êï∞\n            this.failureCount = Math.max(0, this.failureCount - 1);\n        }\n    }\n    recordFailure(error) {\n        this.failureCount++;\n        this.lastFailureTime = new Date();\n        this.consecutiveSuccesses = 0;\n        this.metrics.failedExecutions++;\n        this.metrics.lastExecutionTime = new Date();\n        if (this.state === \"closed\" && this.failureCount >= this.options.failureThreshold) {\n            this.transitionToOpen();\n        } else if (this.state === \"half-open\") {\n            this.transitionToOpen();\n        }\n    }\n    transitionToOpen() {\n        this.state = \"open\";\n        this.nextAttemptTime = new Date(Date.now() + this.options.recoveryTimeout);\n        this.halfOpenAttempts = 0;\n        this.metrics.circuitOpens++;\n        console.warn(`üî¥ Circuit breaker opened. Next attempt at ${this.nextAttemptTime.toISOString()}`);\n    }\n    transitionToHalfOpen() {\n        this.state = \"half-open\";\n        this.halfOpenAttempts = 0;\n        this.consecutiveSuccesses = 0;\n        console.log(\"\\uD83D\\uDFE1 Circuit breaker half-open - testing connection\");\n    }\n    transitionToClosed() {\n        this.state = \"closed\";\n        this.failureCount = 0;\n        this.halfOpenAttempts = 0;\n        this.consecutiveSuccesses = 0;\n        this.metrics.circuitCloses++;\n        console.log(\"\\uD83D\\uDFE2 Circuit breaker closed - connection restored\");\n    }\n    shouldAttemptReset() {\n        if (!this.nextAttemptTime) return false;\n        return Date.now() >= this.nextAttemptTime.getTime();\n    }\n    recordResponseTime(responseTime) {\n        this.responseTimes.push(responseTime);\n        // ‰øùÊåÅÊúÄËøë100‰∏™ÂìçÂ∫îÊó∂Èó¥\n        if (this.responseTimes.length > 100) {\n            this.responseTimes = this.responseTimes.slice(-100);\n        }\n        // Êõ¥Êñ∞Âπ≥ÂùáÂìçÂ∫îÊó∂Èó¥\n        this.metrics.averageResponseTime = this.responseTimes.reduce((sum, time)=>sum + time, 0) / this.responseTimes.length;\n    }\n    getStatus() {\n        const errorRate = this.totalRequests > 0 ? this.failureCount / this.totalRequests : 0;\n        return {\n            state: this.state,\n            failureCount: this.failureCount,\n            successCount: this.successCount,\n            lastFailureTime: this.lastFailureTime,\n            lastSuccessTime: this.lastSuccessTime,\n            nextAttemptTime: this.nextAttemptTime,\n            totalRequests: this.totalRequests,\n            errorRate,\n            halfOpenAttempts: this.halfOpenAttempts,\n            consecutiveSuccesses: this.consecutiveSuccesses\n        };\n    }\n    getMetrics() {\n        return {\n            ...this.metrics\n        };\n    }\n    reset() {\n        this.state = \"closed\";\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.lastFailureTime = undefined;\n        this.lastSuccessTime = undefined;\n        this.nextAttemptTime = undefined;\n        this.totalRequests = 0;\n        this.halfOpenAttempts = 0;\n        this.consecutiveSuccesses = 0;\n        this.responseTimes = [];\n        console.log(\"\\uD83D\\uDD04 Circuit breaker manually reset\");\n    }\n    forceOpen() {\n        this.transitionToOpen();\n    }\n    forceClose() {\n        this.transitionToClosed();\n    }\n    // Ëé∑ÂèñÊñ≠Ë∑ØÂô®ÈÖçÁΩÆ\n    getConfig() {\n        return {\n            ...this.options\n        };\n    }\n    // Êõ¥Êñ∞Êñ≠Ë∑ØÂô®ÈÖçÁΩÆ\n    updateConfig(newOptions) {\n        this.options = {\n            ...this.options,\n            ...newOptions\n        };\n        console.log(\"‚öôÔ∏è  Circuit breaker configuration updated\");\n    }\n}\n// Ëá™ÂÆö‰πâÈîôËØØÁ±ª\nclass ServiceUnavailableError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"ServiceUnavailableError\";\n    }\n}\n// Êñ≠Ë∑ØÂô®ÁÆ°ÁêÜÂô®\nclass CircuitBreakerManager {\n    constructor(defaultOptions){\n        this.breakers = new Map();\n        this.metrics = new Map();\n        this.defaultOptions = defaultOptions;\n    }\n    getBreaker(name, options) {\n        if (!this.breakers.has(name)) {\n            const breakerOptions = {\n                ...this.defaultOptions,\n                ...options\n            };\n            this.breakers.set(name, new CircuitBreaker(breakerOptions));\n        }\n        return this.breakers.get(name);\n    }\n    getStatus() {\n        const status = {};\n        this.breakers.forEach((breaker, name)=>{\n            status[name] = breaker.getStatus();\n        });\n        return status;\n    }\n    getMetrics() {\n        const metrics = {};\n        this.breakers.forEach((breaker, name)=>{\n            metrics[name] = breaker.getMetrics();\n        });\n        return metrics;\n    }\n    resetAll() {\n        this.breakers.forEach((breaker)=>breaker.reset());\n    }\n    forceOpenAll() {\n        this.breakers.forEach((breaker)=>breaker.forceOpen());\n    }\n    forceCloseAll() {\n        this.breakers.forEach((breaker)=>breaker.forceClose());\n    }\n    // Ëé∑ÂèñÊâÄÊúâÊñ≠Ë∑ØÂô®ÁöÑËÅöÂêàÁä∂ÊÄÅ\n    getAggregateStatus() {\n        const statuses = this.getStatus();\n        const totalBreakers = Object.keys(statuses).length;\n        const openBreakers = Object.values(statuses).filter((s)=>s.state === \"open\").length;\n        const halfOpenBreakers = Object.values(statuses).filter((s)=>s.state === \"half-open\").length;\n        const closedBreakers = Object.values(statuses).filter((s)=>s.state === \"closed\").length;\n        let overallHealth = \"healthy\";\n        if (openBreakers > 0) {\n            overallHealth = openBreakers > totalBreakers * 0.5 ? \"unhealthy\" : \"degraded\";\n        } else if (halfOpenBreakers > 0) {\n            overallHealth = \"degraded\";\n        }\n        return {\n            totalBreakers,\n            openBreakers,\n            halfOpenBreakers,\n            closedBreakers,\n            overallHealth\n        };\n    }\n}\n// ÂÖ®Â±ÄÊñ≠Ë∑ØÂô®ÁÆ°ÁêÜÂô®ÂÆû‰æã\nconst circuitBreakerManager = new CircuitBreakerManager({\n    failureThreshold: 5,\n    recoveryTimeout: 60000,\n    expectedResponseTime: 5000,\n    halfOpenMaxAttempts: 3\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/circuitBreaker.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/retry.ts":
/*!****************************!*\
  !*** ./lib/utils/retry.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Retryable: () => (/* binding */ Retryable),\n/* harmony export */   exponentialBackoff: () => (/* binding */ exponentialBackoff),\n/* harmony export */   isTransientError: () => (/* binding */ isTransientError),\n/* harmony export */   withBatchRetry: () => (/* binding */ withBatchRetry),\n/* harmony export */   withConditionalRetry: () => (/* binding */ withConditionalRetry),\n/* harmony export */   withRetry: () => (/* binding */ withRetry),\n/* harmony export */   withRetryAndTimeout: () => (/* binding */ withRetryAndTimeout)\n/* harmony export */ });\n// ÈîôËØØÂàÜÁ±ª\nfunction isTransientError(error) {\n    if (!error) return false;\n    const transientErrorCodes = [\n        \"PGRST301\",\n        \"PGRST302\",\n        \"PGRST303\",\n        \"PGRST304\",\n        \"PGRST305\",\n        \"ECONNRESET\",\n        \"ECONNREFUSED\",\n        \"ETIMEDOUT\",\n        \"ENOTFOUND\"\n    ];\n    const transientErrorMessages = [\n        \"timeout\",\n        \"connection\",\n        \"network\",\n        \"temporary\",\n        \"retry\",\n        \"rate limit\",\n        \"too many requests\",\n        \"service unavailable\",\n        \"internal server error\"\n    ];\n    // Ê£ÄÊü•ÈîôËØØ‰ª£Á†Å\n    if (error.code && transientErrorCodes.includes(error.code)) {\n        return true;\n    }\n    // Ê£ÄÊü•ÈîôËØØÊ∂àÊÅØ\n    if (error.message) {\n        const lowerMessage = error.message.toLowerCase();\n        return transientErrorMessages.some((msg)=>lowerMessage.includes(msg));\n    }\n    // Ê£ÄÊü• HTTP Áä∂ÊÄÅÁ†Å\n    if (error.status) {\n        return [\n            408,\n            429,\n            500,\n            502,\n            503,\n            504\n        ].includes(error.status);\n    }\n    return false;\n}\n// ÊåáÊï∞ÈÄÄÈÅøÁÆóÊ≥ï\nfunction exponentialBackoff(attempt, baseDelay = 1000, maxDelay = 30000, backoffMultiplier = 2) {\n    const delay = Math.min(baseDelay * Math.pow(backoffMultiplier, attempt - 1), maxDelay);\n    // Ê∑ªÂä†ÈöèÊú∫ÊäñÂä®‰ª•ÈÅøÂÖçÊÉäÁæ§ÊïàÂ∫î\n    const jitter = delay * 0.1 * Math.random();\n    return delay + jitter;\n}\n// Êô∫ËÉΩÈáçËØïÂáΩÊï∞\nasync function withRetry(fn, options = {}) {\n    const { maxRetries = 3, baseDelay = 1000, maxDelay = 30000, backoffMultiplier = 2, jitter = true } = options;\n    const startTime = Date.now();\n    let lastError = null;\n    for(let attempt = 1; attempt <= maxRetries + 1; attempt++){\n        try {\n            const result = await fn();\n            const totalTime = Date.now() - startTime;\n            return {\n                result,\n                attempts: attempt,\n                totalTime\n            };\n        } catch (error) {\n            lastError = error;\n            // Â¶ÇÊûú‰∏çÊòØ‰∏¥Êó∂ÈîôËØØÔºåÁõ¥Êé•ÊäõÂá∫\n            if (!isTransientError(error)) {\n                throw error;\n            }\n            // Â¶ÇÊûúÂ∑≤ÁªèËææÂà∞ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ÔºåÊäõÂá∫ÈîôËØØ\n            if (attempt > maxRetries) {\n                break;\n            }\n            // ËÆ°ÁÆóÂª∂ËøüÊó∂Èó¥\n            const delay = jitter ? exponentialBackoff(attempt, baseDelay, maxDelay, backoffMultiplier) : baseDelay * Math.pow(backoffMultiplier, attempt - 1);\n            console.log(`‚ö†Ô∏è  Attempt ${attempt} failed, retrying in ${delay}ms...`);\n            await sleep(delay);\n        }\n    }\n    const totalTime = Date.now() - startTime;\n    throw new Error(`Operation failed after ${maxRetries + 1} attempts (${totalTime}ms): ${lastError?.message}`);\n}\n// Â∏¶Ë∂ÖÊó∂ÁöÑÈáçËØïÂáΩÊï∞\nasync function withRetryAndTimeout(fn, timeout = 30000, retryOptions = {}) {\n    return withRetry(()=>Promise.race([\n            fn(),\n            new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Operation timeout\")), timeout))\n        ]), retryOptions);\n}\n// ÊâπÈáèÈáçËØïÂáΩÊï∞\nasync function withBatchRetry(items, processor, options = {}) {\n    const { concurrency = 5, stopOnError = false, ...retryOptions } = options;\n    const results = [];\n    const errors = [];\n    // ÂàÜÊâπÂ§ÑÁêÜ\n    for(let i = 0; i < items.length; i += concurrency){\n        const batch = items.slice(i, i + concurrency);\n        const batchPromises = batch.map(async (item)=>{\n            try {\n                const result = await withRetry(()=>processor(item), retryOptions);\n                return {\n                    success: true,\n                    item,\n                    result: result.result\n                };\n            } catch (error) {\n                if (stopOnError) {\n                    throw error;\n                }\n                return {\n                    success: false,\n                    item,\n                    error: error\n                };\n            }\n        });\n        const batchResults = await Promise.allSettled(batchPromises);\n        batchResults.forEach((result)=>{\n            if (result.status === \"fulfilled\") {\n                if (result.value.success) {\n                    results.push(result.value.result);\n                } else {\n                    errors.push({\n                        item: result.value.item,\n                        error: result.value.error || new Error(\"Unknown error\")\n                    });\n                }\n            } else {\n                throw result.reason;\n            }\n        });\n    }\n    return {\n        results,\n        errors\n    };\n}\n// Êù°‰ª∂ÈáçËØïÂáΩÊï∞\nasync function withConditionalRetry(fn, condition, options = {}) {\n    return withRetry(async ()=>{\n        const result = await fn();\n        if (!condition(result)) {\n            throw new Error(\"Condition not met\");\n        }\n        return result;\n    }, options);\n}\n// Â∑•ÂÖ∑ÂáΩÊï∞\nfunction sleep(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n// ÈáçËØïË£ÖÈ•∞Âô®ÔºàÁî®‰∫éÁ±ªÊñπÊ≥ïÔºâ\nfunction Retryable(options = {}) {\n    return function(target, propertyName, descriptor) {\n        const method = descriptor.value;\n        descriptor.value = async function(...args) {\n            return withRetry(()=>method.apply(this, args), options);\n        };\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/retry.ts\n");

/***/ })

};
;