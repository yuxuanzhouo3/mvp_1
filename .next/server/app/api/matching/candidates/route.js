/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/matching/candidates/route";
exports.ids = ["app/api/matching/candidates/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmatching%2Fcandidates%2Froute&page=%2Fapi%2Fmatching%2Fcandidates%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmatching%2Fcandidates%2Froute.ts&appDir=%2FUsers%2Fmac-guest1%2FDownloads%2FGit%2Fmvp_projects%2Fmvp_1%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmac-guest1%2FDownloads%2FGit%2Fmvp_projects%2Fmvp_1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmatching%2Fcandidates%2Froute&page=%2Fapi%2Fmatching%2Fcandidates%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmatching%2Fcandidates%2Froute.ts&appDir=%2FUsers%2Fmac-guest1%2FDownloads%2FGit%2Fmvp_projects%2Fmvp_1%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmac-guest1%2FDownloads%2FGit%2Fmvp_projects%2Fmvp_1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_mac_guest1_Downloads_Git_mvp_projects_mvp_1_app_api_matching_candidates_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/matching/candidates/route.ts */ \"(rsc)/./app/api/matching/candidates/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/matching/candidates/route\",\n        pathname: \"/api/matching/candidates\",\n        filename: \"route\",\n        bundlePath: \"app/api/matching/candidates/route\"\n    },\n    resolvedPagePath: \"/Users/mac-guest1/Downloads/Git/mvp_projects/mvp_1/app/api/matching/candidates/route.ts\",\n    nextConfigOutput,\n    userland: _Users_mac_guest1_Downloads_Git_mvp_projects_mvp_1_app_api_matching_candidates_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/matching/candidates/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZtYXRjaGluZyUyRmNhbmRpZGF0ZXMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm1hdGNoaW5nJTJGY2FuZGlkYXRlcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm1hdGNoaW5nJTJGY2FuZGlkYXRlcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm1hYy1ndWVzdDElMkZEb3dubG9hZHMlMkZHaXQlMkZtdnBfcHJvamVjdHMlMkZtdnBfMSUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZtYWMtZ3Vlc3QxJTJGRG93bmxvYWRzJTJGR2l0JTJGbXZwX3Byb2plY3RzJTJGbXZwXzEmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3VDO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyc29uYWxpbmsvP2JmNTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL21hYy1ndWVzdDEvRG93bmxvYWRzL0dpdC9tdnBfcHJvamVjdHMvbXZwXzEvYXBwL2FwaS9tYXRjaGluZy9jYW5kaWRhdGVzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvbWF0Y2hpbmcvY2FuZGlkYXRlcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL21hdGNoaW5nL2NhbmRpZGF0ZXNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL21hdGNoaW5nL2NhbmRpZGF0ZXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvbWFjLWd1ZXN0MS9Eb3dubG9hZHMvR2l0L212cF9wcm9qZWN0cy9tdnBfMS9hcHAvYXBpL21hdGNoaW5nL2NhbmRpZGF0ZXMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvbWF0Y2hpbmcvY2FuZGlkYXRlcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmatching%2Fcandidates%2Froute&page=%2Fapi%2Fmatching%2Fcandidates%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmatching%2Fcandidates%2Froute.ts&appDir=%2FUsers%2Fmac-guest1%2FDownloads%2FGit%2Fmvp_projects%2Fmvp_1%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmac-guest1%2FDownloads%2FGit%2Fmvp_projects%2Fmvp_1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/matching/candidates/route.ts":
/*!**********************************************!*\
  !*** ./app/api/matching/candidates/route.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _lib_matching_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/matching/engine */ \"(rsc)/./lib/matching/engine.ts\");\n\n\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__.createClient)(\"https://bamratexknmqvdbalzen.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY);\nasync function GET(request) {\n    try {\n        // Get the authorization header\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"No authorization header\"\n            }, {\n                status: 401\n            });\n        }\n        // Extract the token\n        const token = authHeader.replace(\"Bearer \", \"\");\n        // Verify the token and get user\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n        if (authError || !user) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Invalid token\"\n            }, {\n                status: 401\n            });\n        }\n        // Get query parameters\n        const { searchParams } = new URL(request.url);\n        const refresh = searchParams.get(\"refresh\");\n        const limit = parseInt(searchParams.get(\"limit\") || \"10\");\n        const refreshToken = refresh || Date.now().toString();\n        console.log(\"\\uD83D\\uDD0D Finding matches for user:\", user.id, \"refresh:\", refresh, \"limit:\", limit);\n        // Initialize matching engine\n        const matchingEngine = _lib_matching_engine__WEBPACK_IMPORTED_MODULE_1__.MatchingEngine.getInstance();\n        await matchingEngine.loadUserProfiles();\n        // Get user preferences\n        const { data: preferences } = await supabase.from(\"match_preferences\").select(\"*\").eq(\"user_id\", user.id).single();\n        // Find matches using AI engine\n        const matches = await matchingEngine.findMatches(user.id, limit, refreshToken, preferences);\n        console.log(\"✅ Found\", matches.length, \"matches for user:\", user.id);\n        // Transform matches to candidate format\n        const candidates = matches.map((match)=>({\n                id: match.user.id,\n                full_name: match.user.full_name,\n                avatar_url: match.user.avatar_url,\n                age: match.user.age,\n                location: match.user.location,\n                bio: match.user.bio,\n                interests: match.user.interests,\n                industry: match.user.industry,\n                communication_style: match.user.communication_style,\n                compatibility_score: match.score,\n                common_interests: match.common_interests,\n                match_reasons: match.reasons,\n                match_strength: match.match_strength,\n                conversation_starters: match.conversation_starters,\n                is_online: match.user.is_online,\n                is_premium: match.user.is_premium,\n                is_verified: match.user.is_verified,\n                last_seen: match.user.last_seen,\n                compatibility_factors: match.compatibility_factors\n            }));\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            candidates,\n            refresh_token: refreshToken,\n            total_found: matches.length,\n            user_id: user.id\n        });\n    } catch (error) {\n        console.error(\"❌ Candidates API error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/matching/candidates/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/matching/engine.ts":
/*!********************************!*\
  !*** ./lib/matching/engine.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MatchingEngine: () => (/* binding */ MatchingEngine)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://bamratexknmqvdbalzen.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY);\nclass MatchingEngine {\n    static getInstance() {\n        if (!MatchingEngine.instance) {\n            MatchingEngine.instance = new MatchingEngine();\n        }\n        return MatchingEngine.instance;\n    }\n    async loadUserProfiles() {\n        const { data: profiles, error } = await supabase.from(\"profiles\").select(\"*\");\n        if (error) {\n            console.error(\"Error loading user profiles:\", error);\n            return;\n        }\n        this.userProfiles.clear();\n        profiles?.forEach((profile)=>{\n            this.userProfiles.set(profile.id, profile);\n        });\n    }\n    async findMatches(userId, limit = 10, refreshToken, preferences) {\n        const userProfile = this.userProfiles.get(userId);\n        if (!userProfile) {\n            throw new Error(\"User profile not found\");\n        }\n        const matches = [];\n        const excludedUsers = await this.getExcludedUsers(userId);\n        for (const [otherUserId, otherProfile] of Array.from(this.userProfiles.entries())){\n            if (otherUserId === userId || excludedUsers.has(otherUserId)) continue;\n            // Apply preference filters\n            if (preferences && !this.passesPreferenceFilters(otherProfile, preferences)) {\n                continue;\n            }\n            const score = this.calculateCompatibilityScore(userProfile, otherProfile);\n            const reasons = this.generateMatchReasons(userProfile, otherProfile);\n            const compatibilityFactors = this.calculateCompatibilityFactors(userProfile, otherProfile);\n            const commonInterests = this.findCommonInterests(userProfile, otherProfile);\n            const matchStrength = this.determineMatchStrength(score);\n            const conversationStarters = this.generateConversationStarters(userProfile, otherProfile);\n            matches.push({\n                user: otherProfile,\n                score,\n                reasons,\n                compatibility_factors: compatibilityFactors,\n                common_interests: commonInterests,\n                match_strength: matchStrength,\n                conversation_starters: conversationStarters\n            });\n        }\n        // Apply refresh token for variety\n        let sortedMatches = matches.sort((a, b)=>b.score - a.score);\n        if (refreshToken) {\n            sortedMatches = this.applyRefreshVariety(sortedMatches, refreshToken);\n        }\n        return sortedMatches.slice(0, limit);\n    }\n    async getExcludedUsers(userId) {\n        const excluded = new Set();\n        // Get existing matches\n        const { data: matches } = await supabase.from(\"matches\").select(\"user1_id, user2_id\").or(`user1_id.eq.${userId},user2_id.eq.${userId}`);\n        matches?.forEach((match)=>{\n            if (match.user1_id === userId) {\n                excluded.add(match.user2_id);\n            } else {\n                excluded.add(match.user1_id);\n            }\n        });\n        return excluded;\n    }\n    passesPreferenceFilters(profile, preferences) {\n        // Age filter\n        if (preferences.age_min && profile.age && profile.age < preferences.age_min) return false;\n        if (preferences.age_max && profile.age && profile.age > preferences.age_max) return false;\n        // Gender preference\n        if (preferences.gender_preference && preferences.gender_preference.length > 0) {\n            if (!profile.gender || !preferences.gender_preference.includes(profile.gender)) {\n                return false;\n            }\n        }\n        // Location filter (simplified - would need proper geolocation calculation)\n        if (preferences.location_radius && profile.location) {\n        // This would need proper distance calculation\n        // For now, just check if location exists\n        }\n        // Deal breakers\n        if (preferences.deal_breakers && preferences.deal_breakers.length > 0) {\n            const profileInterests = profile.interests.map((i)=>i.toLowerCase());\n            const hasDealBreaker = preferences.deal_breakers.some((dealBreaker)=>profileInterests.includes(dealBreaker.toLowerCase()));\n            if (hasDealBreaker) return false;\n        }\n        return true;\n    }\n    calculateCompatibilityScore(user1, user2) {\n        const factors = this.calculateCompatibilityFactors(user1, user2);\n        // Enhanced weighted scoring with AI considerations\n        const weights = {\n            interests: 0.25,\n            personality: 0.25,\n            location: 0.15,\n            industry: 0.10,\n            communication: 0.15,\n            activity: 0.05,\n            values: 0.05\n        };\n        let totalScore = 0;\n        let totalWeight = 0;\n        Object.entries(factors).forEach(([factor, score])=>{\n            const weight = weights[factor] || 0;\n            totalScore += score * weight;\n            totalWeight += weight;\n        });\n        // Apply AI enhancement factors\n        const aiEnhancement = this.calculateAIEnhancement(user1, user2);\n        return totalWeight > 0 ? totalScore / totalWeight * aiEnhancement : 0;\n    }\n    calculateAIEnhancement(user1, user2) {\n        let enhancement = 1.0;\n        // Online activity bonus\n        if (user2.is_online) enhancement *= 1.1;\n        // Premium user bonus\n        if (user2.is_premium) enhancement *= 1.05;\n        // Verified user bonus\n        if (user2.is_verified) enhancement *= 1.03;\n        // Recent activity bonus\n        if (user2.last_seen) {\n            const lastSeen = new Date(user2.last_seen);\n            const now = new Date();\n            const hoursSinceLastSeen = (now.getTime() - lastSeen.getTime()) / (1000 * 60 * 60);\n            if (hoursSinceLastSeen < 24) enhancement *= 1.02;\n        }\n        return Math.min(enhancement, 1.2); // Cap at 20% enhancement\n    }\n    calculateCompatibilityFactors(user1, user2) {\n        return {\n            interests: this.calculateInterestsCompatibility(user1, user2),\n            personality: this.calculatePersonalityCompatibility(user1, user2),\n            location: this.calculateLocationCompatibility(user1, user2),\n            industry: this.calculateIndustryCompatibility(user1, user2),\n            communication: this.calculateCommunicationCompatibility(user1, user2),\n            activity: this.calculateActivityCompatibility(user1, user2),\n            values: this.calculateValuesCompatibility(user1, user2)\n        };\n    }\n    calculateInterestsCompatibility(user1, user2) {\n        const interests1 = new Set(user1.interests.map((i)=>i.toLowerCase()));\n        const interests2 = new Set(user2.interests.map((i)=>i.toLowerCase()));\n        // Calculate direct interest overlap\n        const interests1Array = Array.from(interests1);\n        const interests2Array = Array.from(interests2);\n        const intersection = new Set(interests1Array.filter((x)=>interests2.has(x)));\n        const union = new Set([\n            ...interests1Array,\n            ...interests2Array\n        ]);\n        let directScore = union.size > 0 ? intersection.size / union.size : 0;\n        // Calculate category-based compatibility\n        let categoryScore = 0;\n        let categoryMatches = 0;\n        Object.entries(this.interestCategories).forEach(([category, keywords])=>{\n            const user1InCategory = keywords.some((keyword)=>interests1Array.some((interest)=>interest.includes(keyword)));\n            const user2InCategory = keywords.some((keyword)=>interests2Array.some((interest)=>interest.includes(keyword)));\n            if (user1InCategory && user2InCategory) {\n                categoryScore += 1;\n                categoryMatches += 1;\n            } else if (user1InCategory || user2InCategory) {\n                categoryMatches += 1;\n            }\n        });\n        const categoryCompatibility = categoryMatches > 0 ? categoryScore / categoryMatches : 0;\n        // Weighted combination\n        return directScore * 0.7 + categoryCompatibility * 0.3;\n    }\n    calculatePersonalityCompatibility(user1, user2) {\n        const traits1 = user1.personality_traits || {};\n        const traits2 = user2.personality_traits || {};\n        // Calculate similarity for common personality traits\n        const commonTraits = Object.keys(traits1).filter((trait)=>traits2.hasOwnProperty(trait));\n        if (commonTraits.length === 0) {\n            // Fallback to bio analysis\n            return this.analyzePersonalityFromBio(user1, user2);\n        }\n        let totalSimilarity = 0;\n        for (const trait of commonTraits){\n            const value1 = traits1[trait];\n            const value2 = traits2[trait];\n            // Normalize values to 0-1 range and calculate similarity\n            const similarity = 1 - Math.abs(value1 - value2) / Math.max(value1, value2, 1);\n            totalSimilarity += similarity;\n        }\n        return totalSimilarity / commonTraits.length;\n    }\n    analyzePersonalityFromBio(user1, user2) {\n        const bio1 = (user1.bio || \"\").toLowerCase();\n        const bio2 = (user2.bio || \"\").toLowerCase();\n        let compatibility = 0.5; // Neutral base score\n        // Analyze personality keywords\n        Object.entries(this.personalityKeywords).forEach(([trait, keywords])=>{\n            const user1HasTrait = keywords.some((keyword)=>bio1.includes(keyword));\n            const user2HasTrait = keywords.some((keyword)=>bio2.includes(keyword));\n            if (user1HasTrait && user2HasTrait) {\n                compatibility += 0.1; // Bonus for shared traits\n            } else if (user1HasTrait || user2HasTrait) {\n                // Some traits complement each other\n                if (trait === \"extrovert\" && this.hasTrait(bio2, this.personalityKeywords.introvert)) {\n                    compatibility += 0.05; // Extrovert-Introvert can be complementary\n                } else if (trait === \"analytical\" && this.hasTrait(bio2, this.personalityKeywords.creative)) {\n                    compatibility += 0.05; // Analytical-Creative can be complementary\n                }\n            }\n        });\n        return Math.min(compatibility, 1.0);\n    }\n    hasTrait(bio, keywords) {\n        return keywords.some((keyword)=>bio.includes(keyword));\n    }\n    calculateLocationCompatibility(user1, user2) {\n        if (!user1.location || !user2.location) return 0.5;\n        // Simple location matching (would be enhanced with proper geolocation)\n        const location1 = user1.location.toLowerCase();\n        const location2 = user2.location.toLowerCase();\n        // Same city/region\n        if (location1 === location2) return 1.0;\n        // Same country\n        const country1 = location1.split(\",\").pop()?.trim() || \"\";\n        const country2 = location2.split(\",\").pop()?.trim() || \"\";\n        if (country1 === country2 && country1) return 0.8;\n        // Same continent (simplified)\n        const continents = {\n            north_america: [\n                \"united states\",\n                \"canada\",\n                \"mexico\"\n            ],\n            europe: [\n                \"uk\",\n                \"germany\",\n                \"france\",\n                \"spain\",\n                \"italy\"\n            ],\n            asia: [\n                \"china\",\n                \"japan\",\n                \"korea\",\n                \"india\",\n                \"singapore\"\n            ]\n        };\n        for (const [continent, countries] of Object.entries(continents)){\n            if (countries.some((c)=>location1.includes(c)) && countries.some((c)=>location2.includes(c))) {\n                return 0.6;\n            }\n        }\n        return 0.3; // Different continents\n    }\n    calculateIndustryCompatibility(user1, user2) {\n        if (!user1.industry || !user2.industry) return 0.5;\n        // Enhanced industry compatibility matrix\n        const industryGroups = {\n            tech: [\n                \"software\",\n                \"technology\",\n                \"it\",\n                \"engineering\",\n                \"data science\",\n                \"ai\",\n                \"machine learning\"\n            ],\n            finance: [\n                \"finance\",\n                \"banking\",\n                \"investment\",\n                \"accounting\",\n                \"consulting\",\n                \"economics\"\n            ],\n            healthcare: [\n                \"healthcare\",\n                \"medical\",\n                \"nursing\",\n                \"pharmacy\",\n                \"therapy\",\n                \"wellness\"\n            ],\n            education: [\n                \"education\",\n                \"teaching\",\n                \"academic\",\n                \"research\",\n                \"training\",\n                \"learning\"\n            ],\n            creative: [\n                \"design\",\n                \"art\",\n                \"marketing\",\n                \"media\",\n                \"entertainment\",\n                \"advertising\",\n                \"content\"\n            ],\n            business: [\n                \"entrepreneurship\",\n                \"startups\",\n                \"management\",\n                \"sales\",\n                \"operations\"\n            ],\n            legal: [\n                \"law\",\n                \"legal\",\n                \"compliance\",\n                \"regulatory\"\n            ],\n            nonprofit: [\n                \"nonprofit\",\n                \"charity\",\n                \"social work\",\n                \"volunteering\",\n                \"community\"\n            ]\n        };\n        const findIndustryGroup = (industry)=>{\n            const lowerIndustry = industry.toLowerCase();\n            for (const [group, keywords] of Object.entries(industryGroups)){\n                if (keywords.some((keyword)=>lowerIndustry.includes(keyword))) {\n                    return group;\n                }\n            }\n            return \"other\";\n        };\n        const group1 = findIndustryGroup(user1.industry);\n        const group2 = findIndustryGroup(user2.industry);\n        if (group1 === group2) return 1.0;\n        // Complementary industries\n        const complementaryPairs = [\n            [\n                \"tech\",\n                \"creative\"\n            ],\n            [\n                \"finance\",\n                \"tech\"\n            ],\n            [\n                \"healthcare\",\n                \"tech\"\n            ],\n            [\n                \"education\",\n                \"tech\"\n            ]\n        ];\n        if (complementaryPairs.some((pair)=>pair[0] === group1 && pair[1] === group2 || pair[0] === group2 && pair[1] === group1)) {\n            return 0.7;\n        }\n        return 0.3; // Different industries\n    }\n    calculateCommunicationCompatibility(user1, user2) {\n        const styles = [\n            \"casual\",\n            \"formal\",\n            \"professional\",\n            \"friendly\",\n            \"direct\",\n            \"thoughtful\"\n        ];\n        const style1 = (user1.communication_style || \"casual\").toLowerCase();\n        const style2 = (user2.communication_style || \"casual\").toLowerCase();\n        if (style1 === style2) return 1.0;\n        // Complementary communication styles\n        const complementaryPairs = [\n            [\n                \"casual\",\n                \"friendly\"\n            ],\n            [\n                \"formal\",\n                \"professional\"\n            ],\n            [\n                \"direct\",\n                \"thoughtful\"\n            ]\n        ];\n        if (complementaryPairs.some((pair)=>pair[0] === style1 && pair[1] === style2 || pair[0] === style2 && pair[1] === style1)) {\n            return 0.8;\n        }\n        return 0.5; // Neutral compatibility\n    }\n    calculateActivityCompatibility(user1, user2) {\n        // Consider online status and activity patterns\n        let score = 0.5;\n        if (user2.is_online) score += 0.2;\n        if (user2.last_seen) {\n            const lastSeen = new Date(user2.last_seen);\n            const now = new Date();\n            const hoursSinceLastSeen = (now.getTime() - lastSeen.getTime()) / (1000 * 60 * 60);\n            if (hoursSinceLastSeen < 1) score += 0.2; // Very recent\n            else if (hoursSinceLastSeen < 24) score += 0.1; // Today\n            else if (hoursSinceLastSeen < 168) score += 0.05; // This week\n        }\n        return Math.min(score, 1.0);\n    }\n    calculateValuesCompatibility(user1, user2) {\n        // Analyze values from bio and interests\n        const bio1 = (user1.bio || \"\").toLowerCase();\n        const bio2 = (user2.bio || \"\").toLowerCase();\n        const valueKeywords = {\n            sustainability: [\n                \"environmental\",\n                \"sustainable\",\n                \"green\",\n                \"eco-friendly\",\n                \"climate\"\n            ],\n            community: [\n                \"community\",\n                \"volunteering\",\n                \"helping\",\n                \"charity\",\n                \"social\"\n            ],\n            learning: [\n                \"learning\",\n                \"education\",\n                \"growth\",\n                \"development\",\n                \"improvement\"\n            ],\n            creativity: [\n                \"creative\",\n                \"artistic\",\n                \"innovative\",\n                \"original\",\n                \"expressive\"\n            ],\n            health: [\n                \"fitness\",\n                \"wellness\",\n                \"healthy\",\n                \"exercise\",\n                \"yoga\"\n            ],\n            adventure: [\n                \"adventure\",\n                \"exploring\",\n                \"travel\",\n                \"experiences\",\n                \"discovery\"\n            ]\n        };\n        let sharedValues = 0;\n        let totalValues = 0;\n        Object.entries(valueKeywords).forEach(([value, keywords])=>{\n            const user1HasValue = keywords.some((keyword)=>bio1.includes(keyword));\n            const user2HasValue = keywords.some((keyword)=>bio2.includes(keyword));\n            if (user1HasValue || user2HasValue) {\n                totalValues++;\n                if (user1HasValue && user2HasValue) {\n                    sharedValues++;\n                }\n            }\n        });\n        return totalValues > 0 ? sharedValues / totalValues : 0.5;\n    }\n    findCommonInterests(user1, user2) {\n        const interests1 = new Set(user1.interests.map((i)=>i.toLowerCase()));\n        const interests2 = new Set(user2.interests.map((i)=>i.toLowerCase()));\n        return Array.from(interests1).filter((interest)=>interests2.has(interest));\n    }\n    determineMatchStrength(score) {\n        if (score >= 0.8) return \"high\";\n        if (score >= 0.6) return \"medium\";\n        return \"low\";\n    }\n    generateConversationStarters(user1, user2) {\n        const starters = [];\n        const commonInterests = this.findCommonInterests(user1, user2);\n        if (commonInterests.length > 0) {\n            const interest = commonInterests[0];\n            starters.push(`I noticed we both love ${interest}! What's your favorite thing about it?`);\n            starters.push(`Hey! I see you're into ${interest} too. Any recommendations?`);\n        }\n        if (user2.industry) {\n            starters.push(`Your work in ${user2.industry} sounds fascinating! What's the most interesting project you've worked on?`);\n        }\n        if (user2.location) {\n            starters.push(`I've always wanted to visit ${user2.location}! What's the best thing about living there?`);\n        }\n        if (user2.bio) {\n            const bioWords = user2.bio.split(\" \").slice(0, 5).join(\" \");\n            starters.push(`Your bio mentions \"${bioWords}...\" - that sounds really interesting!`);\n        }\n        // Fallback starters\n        if (starters.length === 0) {\n            starters.push(\"Hi! I'd love to learn more about your interests and experiences.\");\n            starters.push(\"Hey there! What's something exciting you've been working on lately?\");\n        }\n        return starters.slice(0, 3); // Return top 3 starters\n    }\n    applyRefreshVariety(matches, refreshToken) {\n        // Use refresh token to shuffle and provide variety\n        const seed = this.hashString(refreshToken);\n        const shuffled = [\n            ...matches\n        ];\n        // Fisher-Yates shuffle with seed\n        for(let i = shuffled.length - 1; i > 0; i--){\n            const j = (seed + i) % (i + 1);\n            [shuffled[i], shuffled[j]] = [\n                shuffled[j],\n                shuffled[i]\n            ];\n        }\n        // Boost some lower-scored matches for variety\n        const boosted = shuffled.map((match, index)=>{\n            if (index > 2 && match.score < 0.7) {\n                return {\n                    ...match,\n                    score: match.score * 1.1,\n                    reasons: [\n                        ...match.reasons,\n                        \"Fresh perspective for variety\"\n                    ]\n                };\n            }\n            return match;\n        });\n        return boosted.sort((a, b)=>b.score - a.score);\n    }\n    hashString(str) {\n        let hash = 0;\n        for(let i = 0; i < str.length; i++){\n            const char = str.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return Math.abs(hash);\n    }\n    generateMatchReasons(user1, user2) {\n        const reasons = [];\n        const factors = this.calculateCompatibilityFactors(user1, user2);\n        // Interest-based reasons\n        const commonInterests = this.findCommonInterests(user1, user2);\n        if (commonInterests.length >= 2) {\n            reasons.push(`You both share interests in ${commonInterests.slice(0, 2).join(\" and \")}`);\n        } else if (commonInterests.length === 1) {\n            reasons.push(`You both love ${commonInterests[0]}`);\n        }\n        // Industry compatibility\n        if (factors.industry > 0.7) {\n            reasons.push(\"Professional alignment in your fields\");\n        }\n        // Communication style\n        if (factors.communication > 0.8) {\n            reasons.push(\"Compatible communication styles\");\n        }\n        // Location proximity\n        if (factors.location > 0.8) {\n            reasons.push(\"Located in the same area\");\n        }\n        // Activity level\n        if (user2.is_online) {\n            reasons.push(\"Currently active and online\");\n        }\n        // Premium/verified status\n        if (user2.is_premium) {\n            reasons.push(\"Premium member with enhanced features\");\n        }\n        if (user2.is_verified) {\n            reasons.push(\"Verified profile for added trust\");\n        }\n        // Fallback reasons\n        if (reasons.length === 0) {\n            reasons.push(\"Great potential for meaningful connection\");\n            reasons.push(\"Complementary personality traits\");\n        }\n        return reasons.slice(0, 3); // Return top 3 reasons\n    }\n    async saveMatch(userId, matchedUserId, score, reasons) {\n        const { error } = await supabase.from(\"matches\").insert({\n            user1_id: userId,\n            user2_id: matchedUserId,\n            status: \"pending\",\n            user1_liked_at: new Date().toISOString()\n        });\n        if (error) {\n            console.error(\"Error saving match:\", error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.userProfiles = new Map();\n        this.personalityKeywords = {\n            extrovert: [\n                \"outgoing\",\n                \"social\",\n                \"energetic\",\n                \"talkative\",\n                \"friendly\"\n            ],\n            introvert: [\n                \"thoughtful\",\n                \"reserved\",\n                \"quiet\",\n                \"reflective\",\n                \"independent\"\n            ],\n            analytical: [\n                \"logical\",\n                \"data-driven\",\n                \"systematic\",\n                \"precise\",\n                \"methodical\"\n            ],\n            creative: [\n                \"artistic\",\n                \"imaginative\",\n                \"innovative\",\n                \"expressive\",\n                \"original\"\n            ],\n            empathetic: [\n                \"caring\",\n                \"understanding\",\n                \"compassionate\",\n                \"supportive\",\n                \"kind\"\n            ],\n            ambitious: [\n                \"driven\",\n                \"goal-oriented\",\n                \"motivated\",\n                \"determined\",\n                \"focused\"\n            ],\n            adventurous: [\n                \"explorer\",\n                \"risk-taker\",\n                \"spontaneous\",\n                \"curious\",\n                \"bold\"\n            ],\n            practical: [\n                \"realistic\",\n                \"pragmatic\",\n                \"down-to-earth\",\n                \"sensible\",\n                \"reliable\"\n            ]\n        };\n        this.interestCategories = {\n            technology: [\n                \"programming\",\n                \"ai\",\n                \"machine learning\",\n                \"software\",\n                \"tech\",\n                \"coding\",\n                \"data science\"\n            ],\n            sports: [\n                \"running\",\n                \"fitness\",\n                \"gym\",\n                \"yoga\",\n                \"swimming\",\n                \"tennis\",\n                \"basketball\",\n                \"soccer\"\n            ],\n            arts: [\n                \"painting\",\n                \"photography\",\n                \"music\",\n                \"dance\",\n                \"theater\",\n                \"writing\",\n                \"poetry\"\n            ],\n            travel: [\n                \"backpacking\",\n                \"exploring\",\n                \"adventure\",\n                \"culture\",\n                \"languages\",\n                \"photography\"\n            ],\n            food: [\n                \"cooking\",\n                \"baking\",\n                \"restaurants\",\n                \"wine\",\n                \"coffee\",\n                \"culinary\"\n            ],\n            nature: [\n                \"hiking\",\n                \"camping\",\n                \"gardening\",\n                \"environmental\",\n                \"outdoors\",\n                \"wildlife\"\n            ],\n            business: [\n                \"entrepreneurship\",\n                \"startups\",\n                \"investing\",\n                \"marketing\",\n                \"finance\"\n            ],\n            education: [\n                \"reading\",\n                \"learning\",\n                \"teaching\",\n                \"research\",\n                \"academic\",\n                \"knowledge\"\n            ],\n            social: [\n                \"volunteering\",\n                \"community\",\n                \"networking\",\n                \"mentoring\",\n                \"charity\"\n            ],\n            entertainment: [\n                \"movies\",\n                \"tv shows\",\n                \"gaming\",\n                \"comics\",\n                \"anime\",\n                \"streaming\"\n            ]\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/matching/engine.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/ws","vendor-chunks/whatwg-url","vendor-chunks/isows"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmatching%2Fcandidates%2Froute&page=%2Fapi%2Fmatching%2Fcandidates%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmatching%2Fcandidates%2Froute.ts&appDir=%2FUsers%2Fmac-guest1%2FDownloads%2FGit%2Fmvp_projects%2Fmvp_1%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmac-guest1%2FDownloads%2FGit%2Fmvp_projects%2Fmvp_1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();