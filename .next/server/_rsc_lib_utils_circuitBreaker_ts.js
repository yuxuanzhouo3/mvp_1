"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_utils_circuitBreaker_ts";
exports.ids = ["_rsc_lib_utils_circuitBreaker_ts"];
exports.modules = {

/***/ "(rsc)/./lib/utils/circuitBreaker.ts":
/*!*************************************!*\
  !*** ./lib/utils/circuitBreaker.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircuitBreaker: () => (/* binding */ CircuitBreaker),\n/* harmony export */   CircuitBreakerManager: () => (/* binding */ CircuitBreakerManager),\n/* harmony export */   ServiceUnavailableError: () => (/* binding */ ServiceUnavailableError),\n/* harmony export */   circuitBreakerManager: () => (/* binding */ circuitBreakerManager)\n/* harmony export */ });\nclass CircuitBreaker {\n    constructor(options){\n        this.state = \"closed\";\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.totalRequests = 0;\n        this.halfOpenAttempts = 0;\n        this.consecutiveSuccesses = 0;\n        this.metrics = {\n            totalExecutions: 0,\n            successfulExecutions: 0,\n            failedExecutions: 0,\n            circuitOpens: 0,\n            circuitCloses: 0,\n            averageResponseTime: 0\n        };\n        this.responseTimes = [];\n        this.options = {\n            monitoringWindow: 60000,\n            halfOpenMaxAttempts: 3,\n            ...options\n        };\n    }\n    async execute(fn) {\n        this.totalRequests++;\n        this.metrics.totalExecutions++;\n        // 检查断路器状态\n        if (this.state === \"open\") {\n            if (this.shouldAttemptReset()) {\n                this.transitionToHalfOpen();\n            } else {\n                throw new ServiceUnavailableError(`Circuit breaker is open. Next attempt at ${this.nextAttemptTime?.toISOString()}`);\n            }\n        }\n        try {\n            const startTime = Date.now();\n            const result = await Promise.race([\n                fn(),\n                this.createTimeoutPromise()\n            ]);\n            const responseTime = Date.now() - startTime;\n            this.recordResponseTime(responseTime);\n            // 检查响应时间\n            if (responseTime > this.options.expectedResponseTime) {\n                this.recordFailure(new Error(`Response time ${responseTime}ms exceeded threshold ${this.options.expectedResponseTime}ms`));\n                throw new Error(\"Response time exceeded threshold\");\n            }\n            this.recordSuccess();\n            return result;\n        } catch (error) {\n            this.recordFailure(error);\n            throw error;\n        }\n    }\n    createTimeoutPromise() {\n        return new Promise((_, reject)=>{\n            setTimeout(()=>{\n                reject(new Error(`Operation timeout after ${this.options.expectedResponseTime}ms`));\n            }, this.options.expectedResponseTime);\n        });\n    }\n    recordSuccess() {\n        this.successCount++;\n        this.lastSuccessTime = new Date();\n        this.consecutiveSuccesses++;\n        this.metrics.successfulExecutions++;\n        this.metrics.lastExecutionTime = new Date();\n        if (this.state === \"half-open\") {\n            this.halfOpenAttempts++;\n            // 如果半开状态下连续成功次数达到阈值，关闭断路器\n            if (this.consecutiveSuccesses >= this.options.halfOpenMaxAttempts) {\n                this.transitionToClosed();\n            }\n        } else if (this.state === \"closed\") {\n            // 在关闭状态下，重置失败计数\n            this.failureCount = Math.max(0, this.failureCount - 1);\n        }\n    }\n    recordFailure(error) {\n        this.failureCount++;\n        this.lastFailureTime = new Date();\n        this.consecutiveSuccesses = 0;\n        this.metrics.failedExecutions++;\n        this.metrics.lastExecutionTime = new Date();\n        if (this.state === \"closed\" && this.failureCount >= this.options.failureThreshold) {\n            this.transitionToOpen();\n        } else if (this.state === \"half-open\") {\n            this.transitionToOpen();\n        }\n    }\n    transitionToOpen() {\n        this.state = \"open\";\n        this.nextAttemptTime = new Date(Date.now() + this.options.recoveryTimeout);\n        this.halfOpenAttempts = 0;\n        this.metrics.circuitOpens++;\n        console.warn(`🔴 Circuit breaker opened. Next attempt at ${this.nextAttemptTime.toISOString()}`);\n    }\n    transitionToHalfOpen() {\n        this.state = \"half-open\";\n        this.halfOpenAttempts = 0;\n        this.consecutiveSuccesses = 0;\n        console.log(\"\\uD83D\\uDFE1 Circuit breaker half-open - testing connection\");\n    }\n    transitionToClosed() {\n        this.state = \"closed\";\n        this.failureCount = 0;\n        this.halfOpenAttempts = 0;\n        this.consecutiveSuccesses = 0;\n        this.metrics.circuitCloses++;\n        console.log(\"\\uD83D\\uDFE2 Circuit breaker closed - connection restored\");\n    }\n    shouldAttemptReset() {\n        if (!this.nextAttemptTime) return false;\n        return Date.now() >= this.nextAttemptTime.getTime();\n    }\n    recordResponseTime(responseTime) {\n        this.responseTimes.push(responseTime);\n        // 保持最近100个响应时间\n        if (this.responseTimes.length > 100) {\n            this.responseTimes = this.responseTimes.slice(-100);\n        }\n        // 更新平均响应时间\n        this.metrics.averageResponseTime = this.responseTimes.reduce((sum, time)=>sum + time, 0) / this.responseTimes.length;\n    }\n    getStatus() {\n        const errorRate = this.totalRequests > 0 ? this.failureCount / this.totalRequests : 0;\n        return {\n            state: this.state,\n            failureCount: this.failureCount,\n            successCount: this.successCount,\n            lastFailureTime: this.lastFailureTime,\n            lastSuccessTime: this.lastSuccessTime,\n            nextAttemptTime: this.nextAttemptTime,\n            totalRequests: this.totalRequests,\n            errorRate,\n            halfOpenAttempts: this.halfOpenAttempts,\n            consecutiveSuccesses: this.consecutiveSuccesses\n        };\n    }\n    getMetrics() {\n        return {\n            ...this.metrics\n        };\n    }\n    reset() {\n        this.state = \"closed\";\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.lastFailureTime = undefined;\n        this.lastSuccessTime = undefined;\n        this.nextAttemptTime = undefined;\n        this.totalRequests = 0;\n        this.halfOpenAttempts = 0;\n        this.consecutiveSuccesses = 0;\n        this.responseTimes = [];\n        console.log(\"\\uD83D\\uDD04 Circuit breaker manually reset\");\n    }\n    forceOpen() {\n        this.transitionToOpen();\n    }\n    forceClose() {\n        this.transitionToClosed();\n    }\n    // 获取断路器配置\n    getConfig() {\n        return {\n            ...this.options\n        };\n    }\n    // 更新断路器配置\n    updateConfig(newOptions) {\n        this.options = {\n            ...this.options,\n            ...newOptions\n        };\n        console.log(\"⚙️  Circuit breaker configuration updated\");\n    }\n}\n// 自定义错误类\nclass ServiceUnavailableError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"ServiceUnavailableError\";\n    }\n}\n// 断路器管理器\nclass CircuitBreakerManager {\n    constructor(defaultOptions){\n        this.breakers = new Map();\n        this.metrics = new Map();\n        this.defaultOptions = defaultOptions;\n    }\n    getBreaker(name, options) {\n        if (!this.breakers.has(name)) {\n            const breakerOptions = {\n                ...this.defaultOptions,\n                ...options\n            };\n            this.breakers.set(name, new CircuitBreaker(breakerOptions));\n        }\n        return this.breakers.get(name);\n    }\n    getStatus() {\n        const status = {};\n        this.breakers.forEach((breaker, name)=>{\n            status[name] = breaker.getStatus();\n        });\n        return status;\n    }\n    getMetrics() {\n        const metrics = {};\n        this.breakers.forEach((breaker, name)=>{\n            metrics[name] = breaker.getMetrics();\n        });\n        return metrics;\n    }\n    resetAll() {\n        this.breakers.forEach((breaker)=>breaker.reset());\n    }\n    forceOpenAll() {\n        this.breakers.forEach((breaker)=>breaker.forceOpen());\n    }\n    forceCloseAll() {\n        this.breakers.forEach((breaker)=>breaker.forceClose());\n    }\n    // 获取所有断路器的聚合状态\n    getAggregateStatus() {\n        const statuses = this.getStatus();\n        const totalBreakers = Object.keys(statuses).length;\n        const openBreakers = Object.values(statuses).filter((s)=>s.state === \"open\").length;\n        const halfOpenBreakers = Object.values(statuses).filter((s)=>s.state === \"half-open\").length;\n        const closedBreakers = Object.values(statuses).filter((s)=>s.state === \"closed\").length;\n        let overallHealth = \"healthy\";\n        if (openBreakers > 0) {\n            overallHealth = openBreakers > totalBreakers * 0.5 ? \"unhealthy\" : \"degraded\";\n        } else if (halfOpenBreakers > 0) {\n            overallHealth = \"degraded\";\n        }\n        return {\n            totalBreakers,\n            openBreakers,\n            halfOpenBreakers,\n            closedBreakers,\n            overallHealth\n        };\n    }\n}\n// 全局断路器管理器实例\nconst circuitBreakerManager = new CircuitBreakerManager({\n    failureThreshold: 5,\n    recoveryTimeout: 60000,\n    expectedResponseTime: 5000,\n    halfOpenMaxAttempts: 3\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/circuitBreaker.ts\n");

/***/ })

};
;