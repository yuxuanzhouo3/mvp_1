exports.id=3665,exports.ids=[3665],exports.modules={58359:()=>{},93739:()=>{},20116:(t,e,s)=>{"use strict";s.d(e,{db:()=>o,x:()=>h});var i=s(16163),n=s(85688);class a{static{this.healthStatus={status:"unhealthy",responseTime:0,lastCheck:new Date,errorCount:0,successCount:0,activeConnections:0,queueSize:0}}static{this.isInitialized=!1}static{this.connectionPool=new Map}static{this.lastRecycleTime=Date.now()}static{this.RECYCLE_INTERVAL=3e5}static{this.MAX_POOL_SIZE=10}static initialize(t){this.isInitialized||(this.config={maxRetries:3,retryDelay:1e3,timeout:1e4,maxConnections:20,idleTimeout:3e4,environment:"development",...t},this.applyEnvironmentConfig(),this.circuitBreaker=new n.Zy({failureThreshold:"production"===this.config.environment?3:5,recoveryTimeout:"production"===this.config.environment?3e4:6e4,expectedResponseTime:this.config.timeout}),this.instance=this.createClient(),this.isInitialized=!0,this.startHealthMonitoring(),this.startConnectionRecycling())}static applyEnvironmentConfig(){switch(this.config.environment){case"production":this.config.maxRetries=5,this.config.timeout=15e3,this.config.maxConnections=50;break;case"staging":this.config.maxRetries=4,this.config.timeout=12e3,this.config.maxConnections=30;break;default:this.config.maxRetries=3,this.config.timeout=1e4,this.config.maxConnections=20}}static createClient(){return(0,i.eI)(this.config.url,this.config.serviceRoleKey,{auth:{autoRefreshToken:!0,persistSession:!1},global:{headers:{"X-Client-Info":`personalink-db-manager-${this.config.environment}`},fetch:this.customFetchWithRetry.bind(this)}})}static getInstance(){if(!this.isInitialized)throw Error("Database connection manager not initialized. Call initialize() first.");return this.instance}static get getInitializationStatus(){return this.isInitialized}static getConnectionFromPool(t){if(this.connectionPool.has(t))return this.connectionPool.get(t);if(this.connectionPool.size>=this.MAX_POOL_SIZE){let t=this.connectionPool.keys().next().value;t&&this.connectionPool.delete(t)}let e=this.createClient();return this.connectionPool.set(t,e),e}static startConnectionRecycling(){setInterval(()=>{this.recycleConnections()},this.RECYCLE_INTERVAL)}static recycleConnections(){let t=Date.now(),e=[];this.connectionPool.forEach((t,s)=>{e.push(s)}),e.forEach(t=>{this.connectionPool.delete(t)}),e.length,this.lastRecycleTime=t}static async customFetchWithRetry(t,e){let s=Date.now();return this.circuitBreaker.execute(async()=>{try{this.healthStatus.activeConnections++,this.healthStatus.queueSize++;let i=await fetch(t,{...e,signal:AbortSignal.timeout(this.config.timeout||1e4)}),n=Date.now()-s;return this.updateHealth(!0,n),i}catch(e){let t=Date.now()-s;throw this.updateHealth(!1,t),e}finally{this.healthStatus.activeConnections=Math.max(0,this.healthStatus.activeConnections-1),this.healthStatus.queueSize=Math.max(0,this.healthStatus.queueSize-1)}})}static updateHealth(t,e){this.healthStatus.responseTime=e,this.healthStatus.lastCheck=new Date,t?(this.healthStatus.successCount++,this.healthStatus.errorCount=Math.max(0,this.healthStatus.errorCount-1)):this.healthStatus.errorCount++;let s=this.healthStatus.errorCount/(this.healthStatus.successCount+this.healthStatus.errorCount);0===s?this.healthStatus.status="healthy":s<.1?this.healthStatus.status="degraded":this.healthStatus.status="unhealthy"}static startHealthMonitoring(){this.healthCheckInterval=setInterval(async()=>{await this.performHealthCheck()},3e4)}static async performHealthCheck(){try{let t=Date.now(),{data:e,error:s}=await this.instance.from("profiles").select("count").limit(1),i=Date.now()-t;s?this.updateHealth(!1,i):this.updateHealth(!0,i)}catch(t){this.updateHealth(!1,0)}}static getHealthStatus(){return{...this.healthStatus}}static async executeWithRetry(t,e="database operation"){if(!this.isInitialized)throw Error("Database connection manager not initialized");return this.circuitBreaker.execute(async()=>{let s=null;for(let e=1;e<=this.config.maxRetries;e++)try{let e=await t();return this.updateHealth(!0,0),e}catch(t){if(s=t,this.updateHealth(!1,0),e<this.config.maxRetries){let t=function(t,e=1e3,s=3e4,i=2){let n=Math.min(e*Math.pow(i,t-1),s);return n+.1*n*Math.random()}(e,this.config.retryDelay);await this.sleep(t)}}throw Error(`${e} failed after ${this.config.maxRetries} attempts: ${s?.message}`)})}static sleep(t){return new Promise(e=>setTimeout(e,t))}static async resetConnection(){this.isInitialized=!1,this.healthStatus={status:"unhealthy",responseTime:0,lastCheck:new Date,errorCount:0,successCount:0,activeConnections:0,queueSize:0},this.connectionPool.clear(),this.healthCheckInterval&&clearInterval(this.healthCheckInterval),await this.initialize(this.config)}static getStats(){return{health:this.healthStatus,config:this.config,isInitialized:this.isInitialized,circuitBreaker:this.circuitBreaker.getStatus(),connectionPool:{size:this.connectionPool.size,maxSize:this.MAX_POOL_SIZE,lastRecycle:this.lastRecycleTime}}}}let o=a;function h(){o.initialize({url:"https://bamratexknmqvdbalzen.supabase.co",anonKey:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJhbXJhdGV4a25tcXZkYmFsemVuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI1MTM4NzEsImV4cCI6MjA2ODA4OTg3MX0.yYa98ioJLLouUgHWITGb7U_VjNCTUuM-5NcraM7f3zA",serviceRoleKey:process.env.SUPABASE_SERVICE_ROLE_KEY,environment:"production",maxRetries:3,retryDelay:1e3,timeout:1e4,maxConnections:20,idleTimeout:3e4})}},85688:(t,e,s)=>{"use strict";s.d(e,{OJ:()=>o,Zy:()=>i});class i{constructor(t){this.state="closed",this.failureCount=0,this.successCount=0,this.totalRequests=0,this.halfOpenAttempts=0,this.consecutiveSuccesses=0,this.metrics={totalExecutions:0,successfulExecutions:0,failedExecutions:0,circuitOpens:0,circuitCloses:0,averageResponseTime:0},this.responseTimes=[],this.options={monitoringWindow:6e4,halfOpenMaxAttempts:3,...t}}async execute(t){if(this.totalRequests++,this.metrics.totalExecutions++,"open"===this.state){if(this.shouldAttemptReset())this.transitionToHalfOpen();else throw new n(`Circuit breaker is open. Next attempt at ${this.nextAttemptTime?.toISOString()}`)}try{let e=Date.now(),s=await Promise.race([t(),this.createTimeoutPromise()]),i=Date.now()-e;if(this.recordResponseTime(i),i>this.options.expectedResponseTime)throw this.recordFailure(Error(`Response time ${i}ms exceeded threshold ${this.options.expectedResponseTime}ms`)),Error("Response time exceeded threshold");return this.recordSuccess(),s}catch(t){throw this.recordFailure(t),t}}createTimeoutPromise(){return new Promise((t,e)=>{setTimeout(()=>{e(Error(`Operation timeout after ${this.options.expectedResponseTime}ms`))},this.options.expectedResponseTime)})}recordSuccess(){this.successCount++,this.lastSuccessTime=new Date,this.consecutiveSuccesses++,this.metrics.successfulExecutions++,this.metrics.lastExecutionTime=new Date,"half-open"===this.state?(this.halfOpenAttempts++,this.consecutiveSuccesses>=this.options.halfOpenMaxAttempts&&this.transitionToClosed()):"closed"===this.state&&(this.failureCount=Math.max(0,this.failureCount-1))}recordFailure(t){this.failureCount++,this.lastFailureTime=new Date,this.consecutiveSuccesses=0,this.metrics.failedExecutions++,this.metrics.lastExecutionTime=new Date,"closed"===this.state&&this.failureCount>=this.options.failureThreshold?this.transitionToOpen():"half-open"===this.state&&this.transitionToOpen()}transitionToOpen(){this.state="open",this.nextAttemptTime=new Date(Date.now()+this.options.recoveryTimeout),this.halfOpenAttempts=0,this.metrics.circuitOpens++}transitionToHalfOpen(){this.state="half-open",this.halfOpenAttempts=0,this.consecutiveSuccesses=0}transitionToClosed(){this.state="closed",this.failureCount=0,this.halfOpenAttempts=0,this.consecutiveSuccesses=0,this.metrics.circuitCloses++}shouldAttemptReset(){return!!this.nextAttemptTime&&Date.now()>=this.nextAttemptTime.getTime()}recordResponseTime(t){this.responseTimes.push(t),this.responseTimes.length>100&&(this.responseTimes=this.responseTimes.slice(-100)),this.metrics.averageResponseTime=this.responseTimes.reduce((t,e)=>t+e,0)/this.responseTimes.length}getStatus(){let t=this.totalRequests>0?this.failureCount/this.totalRequests:0;return{state:this.state,failureCount:this.failureCount,successCount:this.successCount,lastFailureTime:this.lastFailureTime,lastSuccessTime:this.lastSuccessTime,nextAttemptTime:this.nextAttemptTime,totalRequests:this.totalRequests,errorRate:t,halfOpenAttempts:this.halfOpenAttempts,consecutiveSuccesses:this.consecutiveSuccesses}}getMetrics(){return{...this.metrics}}reset(){this.state="closed",this.failureCount=0,this.successCount=0,this.lastFailureTime=void 0,this.lastSuccessTime=void 0,this.nextAttemptTime=void 0,this.totalRequests=0,this.halfOpenAttempts=0,this.consecutiveSuccesses=0,this.responseTimes=[]}forceOpen(){this.transitionToOpen()}forceClose(){this.transitionToClosed()}getConfig(){return{...this.options}}updateConfig(t){this.options={...this.options,...t}}}class n extends Error{constructor(t){super(t),this.name="ServiceUnavailableError"}}class a{constructor(t){this.breakers=new Map,this.metrics=new Map,this.defaultOptions=t}getBreaker(t,e){if(!this.breakers.has(t)){let s={...this.defaultOptions,...e};this.breakers.set(t,new i(s))}return this.breakers.get(t)}getStatus(){let t={};return this.breakers.forEach((e,s)=>{t[s]=e.getStatus()}),t}getMetrics(){let t={};return this.breakers.forEach((e,s)=>{t[s]=e.getMetrics()}),t}resetAll(){this.breakers.forEach(t=>t.reset())}forceOpenAll(){this.breakers.forEach(t=>t.forceOpen())}forceCloseAll(){this.breakers.forEach(t=>t.forceClose())}getAggregateStatus(){let t=this.getStatus(),e=Object.keys(t).length,s=Object.values(t).filter(t=>"open"===t.state).length,i=Object.values(t).filter(t=>"half-open"===t.state).length,n=Object.values(t).filter(t=>"closed"===t.state).length,a="healthy";return s>0?a=s>.5*e?"unhealthy":"degraded":i>0&&(a="degraded"),{totalBreakers:e,openBreakers:s,halfOpenBreakers:i,closedBreakers:n,overallHealth:a}}}let o=new a({failureThreshold:5,recoveryTimeout:6e4,expectedResponseTime:5e3,halfOpenMaxAttempts:3})}};