"use strict";exports.id=5688,exports.ids=[5688],exports.modules={85688:(e,t,s)=>{s.d(t,{Zy:()=>i,circuitBreakerManager:()=>n});class i{constructor(e){this.state="closed",this.failureCount=0,this.successCount=0,this.totalRequests=0,this.halfOpenAttempts=0,this.consecutiveSuccesses=0,this.metrics={totalExecutions:0,successfulExecutions:0,failedExecutions:0,circuitOpens:0,circuitCloses:0,averageResponseTime:0},this.responseTimes=[],this.options={monitoringWindow:6e4,halfOpenMaxAttempts:3,...e}}async execute(e){if(this.totalRequests++,this.metrics.totalExecutions++,"open"===this.state){if(this.shouldAttemptReset())this.transitionToHalfOpen();else throw new o(`Circuit breaker is open. Next attempt at ${this.nextAttemptTime?.toISOString()}`)}try{let t=Date.now(),s=await Promise.race([e(),this.createTimeoutPromise()]),i=Date.now()-t;if(this.recordResponseTime(i),i>this.options.expectedResponseTime)throw this.recordFailure(Error(`Response time ${i}ms exceeded threshold ${this.options.expectedResponseTime}ms`)),Error("Response time exceeded threshold");return this.recordSuccess(),s}catch(e){throw this.recordFailure(e),e}}createTimeoutPromise(){return new Promise((e,t)=>{setTimeout(()=>{t(Error(`Operation timeout after ${this.options.expectedResponseTime}ms`))},this.options.expectedResponseTime)})}recordSuccess(){this.successCount++,this.lastSuccessTime=new Date,this.consecutiveSuccesses++,this.metrics.successfulExecutions++,this.metrics.lastExecutionTime=new Date,"half-open"===this.state?(this.halfOpenAttempts++,this.consecutiveSuccesses>=this.options.halfOpenMaxAttempts&&this.transitionToClosed()):"closed"===this.state&&(this.failureCount=Math.max(0,this.failureCount-1))}recordFailure(e){this.failureCount++,this.lastFailureTime=new Date,this.consecutiveSuccesses=0,this.metrics.failedExecutions++,this.metrics.lastExecutionTime=new Date,"closed"===this.state&&this.failureCount>=this.options.failureThreshold?this.transitionToOpen():"half-open"===this.state&&this.transitionToOpen()}transitionToOpen(){this.state="open",this.nextAttemptTime=new Date(Date.now()+this.options.recoveryTimeout),this.halfOpenAttempts=0,this.metrics.circuitOpens++}transitionToHalfOpen(){this.state="half-open",this.halfOpenAttempts=0,this.consecutiveSuccesses=0}transitionToClosed(){this.state="closed",this.failureCount=0,this.halfOpenAttempts=0,this.consecutiveSuccesses=0,this.metrics.circuitCloses++}shouldAttemptReset(){return!!this.nextAttemptTime&&Date.now()>=this.nextAttemptTime.getTime()}recordResponseTime(e){this.responseTimes.push(e),this.responseTimes.length>100&&(this.responseTimes=this.responseTimes.slice(-100)),this.metrics.averageResponseTime=this.responseTimes.reduce((e,t)=>e+t,0)/this.responseTimes.length}getStatus(){let e=this.totalRequests>0?this.failureCount/this.totalRequests:0;return{state:this.state,failureCount:this.failureCount,successCount:this.successCount,lastFailureTime:this.lastFailureTime,lastSuccessTime:this.lastSuccessTime,nextAttemptTime:this.nextAttemptTime,totalRequests:this.totalRequests,errorRate:e,halfOpenAttempts:this.halfOpenAttempts,consecutiveSuccesses:this.consecutiveSuccesses}}getMetrics(){return{...this.metrics}}reset(){this.state="closed",this.failureCount=0,this.successCount=0,this.lastFailureTime=void 0,this.lastSuccessTime=void 0,this.nextAttemptTime=void 0,this.totalRequests=0,this.halfOpenAttempts=0,this.consecutiveSuccesses=0,this.responseTimes=[]}forceOpen(){this.transitionToOpen()}forceClose(){this.transitionToClosed()}getConfig(){return{...this.options}}updateConfig(e){this.options={...this.options,...e}}}class o extends Error{constructor(e){super(e),this.name="ServiceUnavailableError"}}class r{constructor(e){this.breakers=new Map,this.metrics=new Map,this.defaultOptions=e}getBreaker(e,t){if(!this.breakers.has(e)){let s={...this.defaultOptions,...t};this.breakers.set(e,new i(s))}return this.breakers.get(e)}getStatus(){let e={};return this.breakers.forEach((t,s)=>{e[s]=t.getStatus()}),e}getMetrics(){let e={};return this.breakers.forEach((t,s)=>{e[s]=t.getMetrics()}),e}resetAll(){this.breakers.forEach(e=>e.reset())}forceOpenAll(){this.breakers.forEach(e=>e.forceOpen())}forceCloseAll(){this.breakers.forEach(e=>e.forceClose())}getAggregateStatus(){let e=this.getStatus(),t=Object.keys(e).length,s=Object.values(e).filter(e=>"open"===e.state).length,i=Object.values(e).filter(e=>"half-open"===e.state).length,o=Object.values(e).filter(e=>"closed"===e.state).length,r="healthy";return s>0?r=s>.5*t?"unhealthy":"degraded":i>0&&(r="degraded"),{totalBreakers:t,openBreakers:s,halfOpenBreakers:i,closedBreakers:o,overallHealth:r}}}let n=new r({failureThreshold:5,recoveryTimeout:6e4,expectedResponseTime:5e3,halfOpenMaxAttempts:3})}};