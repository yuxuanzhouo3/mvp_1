const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('❌ Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testSecurityVulnerability() {
  console.log('🔒 Testing Security Vulnerability');
  console.log('============================================================');
  console.log('🎯 Testing: Can user reset password for account they don\'t own?');
  console.log('❌ This should be BLOCKED for security');
  console.log('============================================================\n');

  // Test scenarios
  const testScenarios = [
    {
      name: 'Cross-Account Reset Attempt',
      description: 'mornscience@163.com trying to reset jimzh580@gmail.com',
      fromEmail: 'mornscience@163.com',
      targetEmail: 'jimzh580@gmail.com',
      shouldBeBlocked: true
    },
    {
      name: 'Valid Reset (Control Test)',
      description: 'mornscience@163.com resetting their own account',
      fromEmail: 'mornscience@163.com',
      targetEmail: 'mornscience@163.com',
      shouldBeBlocked: false
    },
    {
      name: 'Non-Existent Account',
      description: 'Trying to reset non-existent account',
      fromEmail: 'mornscience@163.com',
      targetEmail: 'nonexistent@example.com',
      shouldBeBlocked: true
    }
  ];

  for (const scenario of testScenarios) {
    console.log(`🔄 Testing: ${scenario.name}`);
    console.log(`📝 Description: ${scenario.description}`);
    console.log(`📧 From: ${scenario.fromEmail}`);
    console.log(`🎯 Target: ${scenario.targetEmail}`);
    console.log(`🔒 Should be blocked: ${scenario.shouldBeBlocked ? 'YES' : 'NO'}`);
    console.log('─'.repeat(50));

    try {
      const { data, error } = await supabase.auth.resetPasswordForEmail(scenario.targetEmail, {
        redirectTo: 'http://localhost:3000/auth/update-password'
      });

      if (error) {
        console.log(`❌ Password reset failed: ${error.message}`);
        
        if (scenario.shouldBeBlocked) {
          console.log('✅ SECURITY: Correctly blocked unauthorized reset attempt');
        } else {
          console.log('❌ SECURITY ISSUE: Legitimate reset was blocked');
        }
      } else {
        console.log('✅ Password reset email sent successfully');
        
        if (scenario.shouldBeBlocked) {
          console.log('🚨 SECURITY VULNERABILITY: Unauthorized reset was allowed!');
          console.log('🚨 This is a serious security issue!');
        } else {
          console.log('✅ SECURITY: Legitimate reset allowed');
        }
      }

    } catch (err) {
      console.log(`❌ Error: ${err.message}`);
    }

    console.log('');
  }

  console.log('📊 Security Analysis Summary');
  console.log('──────────────────────────────────────────────────');
  console.log('🔒 Expected Behavior:');
  console.log('   • Users can only reset their own account passwords');
  console.log('   • Cross-account resets should be blocked');
  console.log('   • Non-existent accounts should be handled securely');
  console.log('');
  console.log('💡 Security Recommendations:');
  console.log('   1. Supabase should validate email ownership');
  console.log('   2. Rate limiting should prevent abuse');
  console.log('   3. Audit logs should track reset attempts');
  console.log('   4. Email verification should be required');
  console.log('');
  console.log('🧪 Manual Testing:');
  console.log('   1. Go to: http://localhost:3000/auth/forgot-password');
  console.log('   2. Try entering different email addresses');
  console.log('   3. Check if unauthorized resets are blocked');
  console.log('   4. Verify only legitimate resets work');
}

testSecurityVulnerability().catch(console.error); 